<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.returnp.admin.dao.mapper.MainMapper">
  	
   <select id="selectSalesReports" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(paymentApprovalDateTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(paymentApprovalDateTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(paymentApprovalDateTime, '%Y-%m-%d') as searchDate, </if>
			
			sum(paymentApprovalAmount) as salesSum,
			sum(if(paymentApprovalAmount >= 0, paymentApprovalAmount , 0)) as salesApprovalSum,
			<![CDATA[ 
			sum(if(paymentApprovalAmount < 0, paymentApprovalAmount , 0)) as salesCancelSum,
			]]>
			count(paymentApprovalAmount) as payCase
		from payment_transaction group by searchDate;
	</select>
	
	 <select id="selectPeriodSalesReports" parameterType="HashMap" resultType="HashMap">
	select 
		date_format(A.paymentApprovalDateTime, '%Y-%m-%d') as searchDate,
   	 		count(A.paymentApprovalAmount) as payCase,
   	 		sum(if(A.paymentApprovalAmount >= 0, A.paymentApprovalAmount , 0)) as salesApprovalSum,
   	 		<![CDATA[ 
			sum(if(paymentApprovalAmount < 0, paymentApprovalAmount , 0)) as salesCancelSum,
			]]>
   	 		sum(A.paymentApprovalAmount) as salesSum
	from 
		(
		 select * from payment_transaction where 1= 1
			<if test = "searchDateStart != null and searchDateEnd != null  "> and (paymentApprovalDateTime between #{searchDateStart} and #{searchDateEnd})</if>
			<if test = "searchAffiliate != null">and affiliateNo = #{searchAffiliate}</if>
			<if test = "searchPaymentTransactionType != null">and paymentTransactionType = #{searchPaymentTransactionType}</if>
			<if test = "searchPaymentApprovalStatus != null">and paymentApprovalStatus = #{searchPaymentApprovalStatus}</if>
			
			<if test = "searchAccLowLimit != null and searchAccMaxLimit != null">
				and (paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit} and paymentApprovalAmount <![CDATA[ <=]]> #{searchAccMaxLimit})
			</if>
			<if test = "searchAccLowLimit != null and searchAccMaxLimit == null">
				and (paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit})
			</if>
			<if test = "searchAccLowLimit == null and searchAccMaxLimit != null">
				and (paymentApprovalAmount 	<![CDATA[ <=]]> #{searchAccMaxLimit})
			</if>
			
			<if test="searchKeyword != null ">
      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		     </if>
			) as A
	group by searchDate;
	</select>
  
  <select id="reportPaymentTransactions" parameterType="HashMap"  resultType="HashMap" >
    select 
    sql_calc_found_rows
    PA.paymentTransactionNo, 
  	PA.memberNo, 
  	PA.memberName, 
  	PA.memberPhone, 
  	PA.memberEmail, 
  	PA.nodeType, 
  	PA.nodeNo, 
    PA.nodeEmail, 
    PA.nodeName, 
    PA.nodePhone, 
    PA.affiliateNo, 
    PA.affiliateSerial, 
    AF.affiliateName, 
    PA.paymentApprovalAmount, 
    PA.paymentApprovalNumber, 
    PA.paymentApprovalStatus, 
    PA.pointBackStatus, 
    PA.paymentTransactionType, 
    PA.paymentApprovalDateTime, 
    PA.orgPaymentData, 
    PA.regAdminNo, 
    PA.createTime, 
    PA.updateTime,
	PTR.paymentRouterNo, 
    (SELECT paymentRouterType from payment_router WHERE paymentRouterNo = PTR.paymentRouterNo) as paymentRouterType,
    (SELECT paymentRouterName from payment_router WHERE paymentRouterNo = PTR.paymentRouterNo) as paymentRouterName,
    (SELECT paymentRouterCode  from payment_router WHERE paymentRouterNo = PTR.paymentRouterNo) as paymentRouterCode
   
    from payment_transaction as PA
    inner join affiliate as AF on (PA.affiliateNo= AF.affiliateNo)
    inner join payment_transaction_router as PTR on (PA.paymentTransactionNo = PTR.paymentTransactionNo)
    where 
    	1 = 1
    	 <if test="searchDate != null "> AND PA.paymentApprovalDateTime  LIKE CONCAT(#{searchDate},'%') </if>
    	 <if test="searchPaymentTransactionType != null "> AND PA.paymentTransactionType   = #{searchPaymentTransactionType} </if>
    	 <if test="searchPaymentApprovalStatus != null "> AND PA.paymentApprovalStatus = #{searchPaymentApprovalStatus} </if>
    	 <if test="searchAffiliate != null "> AND PA.affiliateNo = #{searchAffiliate} </if>
    		<if test = "searchAccLowLimit != null and searchAccMaxLimit != null">
				and (paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit} and paymentApprovalAmount <![CDATA[ <=]]> #{searchAccMaxLimit})
			</if>
			<if test = "searchAccLowLimit != null and searchAccMaxLimit == null">
				and (paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit})
			</if>
			<if test = "searchAccLowLimit == null and searchAccMaxLimit != null">
				and (paymentApprovalAmount 	<![CDATA[ <=]]> #{searchAccMaxLimit})
			</if>
    	 <if test="searchKeyword != null ">
      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		     </if>
     <choose>
   	<when test="order !=null">
		order by ${order} 
	</when>
	<otherwise>
		order by createTime desc
	</otherwise>
	</choose>
	<if test="pagination">
		limit ${pageSize} offset ${offset}
	</if>
  </select>
  
  
  <!-- ===============================================================================================================    -->
	
    <select id="reportGpointPayments" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(paymentApprovalDateTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(paymentApprovalDateTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(paymentApprovalDateTime, '%Y-%m-%d') as searchDate, </if>
			
			sum(paymentApprovalAmount) as paySum,
			sum(realPaymentAmount) as realPaySum,
			sum(gpointPaymentAmount) as gpointPaySum,
			count(realPaymentAmount) as payCase
		from gpoint_payment group by searchDate;
	</select>


  <!-- 기간별 검색에  따른  G point 결제 내역 맆  -->
	<select id="selectPeriodGpointPaymentReports" parameterType="HashMap" resultType="HashMap">
	select 
		date_format(A.paymentApprovalDateTime, '%Y-%m-%d') as searchDate,
   	 	sum(A.paymentApprovalAmount) as paySum,
		sum(A.realPaymentAmount) as realPaySum,
		sum(A.gpointPaymentAmount) as gpointPaySum,
	    count(A.realPaymentAmount) as payCase
	from 
		(
		 select * from gpoint_payment where 1= 1
			<if test = "searchDateStart != null and searchDateEnd != null  "> and (paymentApprovalDateTime between #{searchDateStart} and #{searchDateEnd})</if>
			<if test = "searchAffiliate != null">and affiliateNo = #{searchAffiliate}</if>
			<if test = "searchPaymentTransactionType != null">and paymentTransactionType = #{searchPaymentTransactionType}</if>
			<if test = "searchPaymentApprovalStatus != null">and paymentApprovalStatus = #{searchPaymentApprovalStatus}</if>
			<if test = "searchPaymentMethod != null">and paymentMethod = #{searchPaymentMethod}</if>
			) as A
	group by searchDate;
	</select>
		
	
	<select id="selectGpointPayments" parameterType="HashMap" resultType="HashMap">
		SELECT 
		gpointPaymentNo,
		memberNo,
		memberName,
		memberEmail,
		memberPhone,
		affiliateNo,
		affiliateSerial,
		affiliateName
		paymentApprovalAmount,
		paymentApprovalNumber,
		paymentApprovalStatus,
		paymentMethod,
		paymentTransactionType,
		paymentApprovalDateTime,
		realPaymentAmount,
		gpointPaymentAmount
		createTime,
		updateTime
		FROM gpoint_payment 
		where 
    	  1 = 1
    	 <if test="searchDate != null "> AND paymentApprovalDateTime  LIKE CONCAT(#{searchDate},'%') </if>
    	 <if test="searchPaymentTransactionType != null "> AND paymentTransactionType   = #{searchPaymentTransactionType} </if>
    	 <if test="searchPaymentApprovalStatus != null "> AND paymentApprovalStatus = #{searchPaymentApprovalStatus} </if>
    	 <if test="searchAffiliate != null "> AND affiliateNo = #{searchAffiliate} </if>
    	 <if test = "searchPaymentMethod != null">and paymentMethod = #{searchPaymentMethod}</if>
    	 
     	<choose>
   			<when test="order !=null">
				order by ${order} 
			</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
		<!-- 
			where 1 = 1
			<if test="gpointPaymentNo != null"> AND GP.gpointPaymentNo = #{gpointPaymentNo,jdbcType=INTEGER}</if>
			<if test="affiliateNo != null"> AND GP.affiliateNo = #{affiliateNo,jdbcType=INTEGER}</if>
	        <if test="affiliateSerial != null"> AND affiliateSerial = #{affiliateSerial,jdbcType=VARCHAR}</if>
	         
	         <if test="memberName != null or memberEmail != null  or memberPhone != null || affiliateName != null"> AND ( 1 = 2 </if>
		     <if test="memberName != null">  OR M.memberName  LIKE CONCAT('%',#{memberName},'%') </if>
		     <if test="memberEmail != null"> OR M.memberEmail  LIKE CONCAT('%',#{memberEmail},'%') </if>
		     <if test="memberPhone != null"> OR M.memberPhone  LIKE CONCAT('%',#{memberPhone},'%') </if>
		     <if test="affiliateName != null"> OR A.affiliateName  LIKE CONCAT('%',#{affiliateName},'%') </if>
		     <if test="memberName != null or memberEmail != null  or memberPhone != null  || affiliateName != null"> ) </if> 
		 -->
	</select>
	
	<update id="updateGpointPayment" parameterType="HashMap">
    update gpoint_payment 
    set 
    	paymentApprovalStatus = #{paymentApprovalStatus,jdbcType=VARCHAR},
    	updateTime = NOW()
    where gpointPaymentNo = #{gpointPaymentNo,jdbcType=INTEGER}
   </update>
   
   	<insert id="insertGpointPayment" parameterType="HashMap">
	  insert into gpoint_payment (
	  	  gpointPaymentNo, 
	  	  memberNo, 
	  	  memberEmail,
	  	  memberName, 
	  	  memberPhone,
	  	  affiliateNo, 
	      affiliateSerial, 
	  	  affiliateName,
	      paymentApprovalNumber,
	      paymentApprovalStatus,
	      paymentMethod, 
	      paymentTransactionType, 
	      paymentApprovalDateTime, 
	      paymentApprovalAmount, 
	      realPaymentAmount, 
	      gpointPaymentAmount, 
	      createTime, 
	      updateTime
	      )
	     values (
	       #{gpointPaymentNo}, 
	    	#{memberNo}, 
	    	#{memberEmail}, 
	    	#{memberName}, 
	    	#{memberPhone}, 
	    	#{affiliateNo}, 
	    	#{affiliateSerial},
	    	#{affiliateName},
	    	#{paymentApprovalNumber},
	    	#{paymentApprovalStatus},
	    	#{paymentMethod},
	    	#{paymentTransactionType},
	    	#{paymentApprovalDateTime}, 
	    	#{paymentApprovalAmount}, 
	    	#{realPaymentAmount}, 
	    	#{gpointPaymentAmount}, 
	    	NOW(),
	    	NOW()
	    )
	    
	   <selectKey keyProperty="gpointPaymentNo" resultType="java.lang.Integer" order ="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>	
   </insert>
  
    <!-- ===============================================================================================================    -->
    
   <select id="reportPointWithdrawals" parameterType="HashMap" resultType="HashMap">
	SELECT
		 sql_calc_found_rows
		PW.pointWithdrawalNo,
		PW.memberNo,
		PW.memberBankAccountNo,
		PW.withdrawalAmount,
		PW.withdrawalStatus,
		PW.withdrawalPointType,
		PW.regAdminNo,
		PW.regType,
		M.memberName,
		M.memberEmail,
		M.memberPhone,
		MBA.bankName,
		MBA.accountOwner,
		MBA.bankAccount,
		PW.createTime,
		PW.updateTime
	from point_withdrawal as PW
	inner join member as M on (PW.memberNo = M.memberNo)
	left outer join member_bank_account as MBA on (PW.memberBankAccountNo = MBA.memberBankAccountNo)
	where
		1 = 1
		<if test="searchDate != null "> AND PW.createTime LIKE CONCAT(#{searchDate},'%') </if>
		<if test="searchWithdrawalStatus != null">and withdrawalStatus = #{searchWithdrawalStatus}</if>
		<if
			test="searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit != null">
			and (withdrawalAmount 	<![CDATA[ >=]]>
			#{searchWithdrawalLowLimit} and withdrawalAmount <![CDATA[ <=]]>
			#{searchWithdrawalMaxLimit})
		</if>
		<if
			test="searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit == null">
			and (withdrawalAmount 	<![CDATA[ >=]]>
			#{searchWithdrawalLowLimit})
		</if>
		<if
			test="searchWithdrawalLowLimit == null and searchWithdrawalMaxLimit != null">
			and (withdrawalAmount 	<![CDATA[ <=]]>
			#{searchWithdrawalMaxLimit})
		</if>
	
		<if test="searchKeyword != null ">
			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' )
			OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' )
			)
			</if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	</select>
     
     <select id="selectTotalPointWithdrawalReports" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(A.createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(A.createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(A.createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(A.withdrawalAmount) as withdrawalCase,
	   	 	sum(if(A.withdrawalStatus = '1', A.withdrawalAmount , 0)) as ingWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '2', A.withdrawalAmount , 0)) as completeWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '3', A.withdrawalAmount , 0)) as holdWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '4', A.withdrawalAmount , 0)) as userCancelWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '5', A.withdrawalAmount , 0)) as adminCancelWithdrawalAmountSum,
	   	 	sum(A.withdrawalAmount) as withdrawalSum
		from point_withdrawal as A group by searchDate;
	</select>
	
  	 <select id="selectPointWithdrawalReports" parameterType="HashMap" resultType="HashMap">
	select 
   	 	<if test = "searchWithdrawalDateType == null  or searchWithdrawalDateType == 1 "> date_format(A.createTime, '%Y-%m-%d') as searchDate,</if>
   	 	<if test = "searchWithdrawalDateType == 2 "> date_format(A.updateTime, '%Y-%m-%d') as searchDate,</if>
   	 	
   	 	count(A.withdrawalAmount) as withdrawalCase,
   	 	sum(if(A.withdrawalStatus = '1', A.withdrawalAmount , 0)) as ingWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '2', A.withdrawalAmount , 0)) as completeWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '3', A.withdrawalAmount , 0)) as holdWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '4', A.withdrawalAmount , 0)) as userCancelWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '5', A.withdrawalAmount , 0)) as adminCancelWithdrawalAmountSum,
   	 	sum(A.withdrawalAmount) as withdrawalSum
	from 
		(
		 select PW.*, M.memberName, M.memberEmail from point_withdrawal  as PW
		 inner join member as M on (M.memberNo = PW.memberNo)
		 where 1= 1
			<if test = "searchDateStart != null and searchDateEnd != null  "> and (createTime between #{searchDateStart} and #{searchDateEnd})</if>
			<if test = "searchWithdrawalStatus != null">and withdrawalStatus = #{searchWithdrawalStatus}</if>
			
			<if test = "searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit != null">
				and (withdrawalAmount 	<![CDATA[ >=]]> #{searchWithdrawalLowLimit} and withdrawalAmount <![CDATA[ <=]]> #{searchWithdrawalMaxLimit})
			</if>
			<if test = "searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit == null">
				and (withdrawalAmount 	<![CDATA[ >=]]> #{searchWithdrawalLowLimit})
			</if>
			<if test = "searchWithdrawalLowLimit == null and searchWithdrawalMaxLimit != null">
				and (withdrawalAmount 	<![CDATA[ <=]]> #{searchWithdrawalMaxLimit})
			</if>
			
			<if test="searchKeyword != null ">
      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		     </if>
			) as A
	group by searchDate;
	</select>
	
</mapper>


 
